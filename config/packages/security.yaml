security:
    enable_authenticator_manager: true

    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'bcrypt'
        App\Entity\BackofficeUser: 'bcrypt'

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        users_in_memory:
            memory:
                users:
                    admin@example.com:
                        password: '$2y$13$1W1yLWJd6zHmZuycxT.M6uZHZazdDqw2yQzT02olVvuc7caAn9Y8u'
                        roles: [ 'ROLE_ADMIN' ]

        app_user_provider:
            entity:
                class: App\Entity\BackofficeUser
                property: email

        all_users:
            chain:
                providers: [ 'users_in_memory', 'app_user_provider' ]

    role_hierarchy:
        ROLE_SUPER_ADMIN: [ ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH ]
        ROLE_ADMIN: ROLE_USER


    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: all_users
            entry_point: form_login
            form_login:
                login_path: app_login
                check_path: app_login
                default_target_path: backoffice_dashboard
            logout:
                path: app_logout
                target: website_home

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/, roles: PUBLIC_ACCESS }
        - { path: ^/login, roles: PUBLIC_ACCESS }
        - { path: ^/logout, roles: PUBLIC_ACCESS }
        - { path: ^/home, roles: [IS_AUTHENTICATED_FULLY,ROLE_ADMIN] }
        - { path: ^/concorsi, roles: [IS_AUTHENTICATED_FULLY,ROLE_ADMIN] }
        - { path: ^/lavoro, roles: [IS_AUTHENTICATED_FULLY,ROLE_ADMIN] }
        - { path: ^/chi-siamo, roles: [IS_AUTHENTICATED_FULLY,ROLE_ADMIN] }
        - { path: ^/backoffice, roles: [IS_AUTHENTICATED_FULLY,ROLE_ADMIN] }



when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            App\Entity\BackofficeUser:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon



when@prod:
    security:
        password_hashers:
            App\Entity\BackofficeUser:
                algorithm: bcrypt
