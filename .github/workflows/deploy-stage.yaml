name: Deployment on Stage

on:
  push:
    branches:
      - main-disabled
  workflow_call:
    # Map the workflow outputs to job outputs
    inputs:
      triggering-sha:
        required: true
        type: string


jobs:
  stage-deployment:
    name: Stage deployment
    runs-on: ubuntu-latest
    environment: av-stage
    steps:
      - name: ðŸšš Get latest code
        uses: actions/checkout@v4

#      - name: Checkout on SHA-${{ inputs.triggering-sha }}
#        uses: actions/checkout@v4
#        with:
#          ref: ${{ inputs.triggering-sha }}

      - name: Setup PHP
        uses: shivammathur/setup-php@2.26.0
        with:
          php-version: 8.0

      - name: Install dependencies
        run: |
          APP_ENV=prod composer install --no-dev --prefer-dist --no-progress --ansi

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          #node-version: "${{ matrix.node }}"
          node-version: 16

      - name: Get Yarn cache directory
        id: yarn-cache
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - name: Cache Yarn
        uses: actions/cache@v3
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-node-${{ matrix.node }}-yarn-${{ hashFiles('**/package.json **/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node }}-yarn-

      - name: Install JS dependencies
        run: yarn install

      - name: Build assets
        run: |
          bin/console assets:install public -vvv -e prod
          yarn build

      - name: Overwrite Stage env file
        uses: DamianReeves/write-file-action@master
        with:
          path: .env
          write-mode: overwrite
          contents: |
            # generated by github-action workflow
            APP_ENV=prod
            APP_SECRET=${{ secrets.APP_SECRET }}
            APP_MAINTENANCE_MODE=${{ secrets.APP_MAINTENANCE_MODE }}
            DATABASE_URL=${{ secrets.DATABASE_URL }}

      - name: ðŸ“‚ Sync files
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        timeout-minutes: 120 # first deploy
        #timeout-minutes: 60
        with:
          server: ${{ secrets.FTP_HOST }}
          username: ${{ secrets.FTP_USER }}
          password: ${{ secrets.FTP_PASSWORD }}
          protocol: ftp
          dry-run: false
          exclude: |
            **/.git*
            **/.git*/**
            **/docker/**
            **/docs/**
            **/drivers/**
            **/features/**
            **/node_modules/**
            **/sys/**
            **/tests/**
            **/tools/**
            **/var/**
            
            **/core/backoffice/tests/**
            **/core/ingesting/tests/**
            **/core/publishing/tests/**
            **depfile-*

            .env.altervista*

      - name: Cache clear on remote server
        uses: wei/curl@master
        with:
          args: --insecure -I https://stagemedicaljob.altervista.org/command/cache/clear

      - name: Run database migration on remote server
        uses: wei/curl@master
        with:
          args: --insecure -I https://stagemedicaljob.altervista.org/command/db/migrate

#  cache_clear-on-remote-server:
#    name: Cache clear
#    needs: stage-deployment
#    runs-on: ubuntu-latest
#    environment: av-stage
#    steps:
#      - name: Cache clear on remote server
#        uses: wei/curl@master
#        with:
#          args: --insecure -I https://stagemedicaljob.altervista.org/command/cache/clear
#
#  database-migration-on-remote-server:
#    name: Database migration
#    needs:
#      - stage-deployment
#      - cache_clear-on-remote-server
#    runs-on: ubuntu-latest
#    environment: av-stage
#    steps:
#      - name: database migration on remote server
#        uses: wei/curl@master
#        with:
#          args: --insecure -I https://stagemedicaljob.altervista.org/command/db/migrate
