name: Acceptance stage

on:
  repository_dispatch:
    types: [commit-stage-was-completed-successfully]


env:
  GITHUB_PAT: ${{ secrets.MEMUJOB_CI_GHA_PAT }}
  COVERAGE: '0'
  PHP_EXTENSIONS: ctype, curl, gd, iconv, intl, opcache, openssl, mbstring, mysql, pdo_sqlite
  PHP_EXTENSIONS_CACHE_KEY: cache-php-extensions-v1

  CORE_INTEGRATION_COVERAGE_ARTIFATC_NAME: 'Coverage-reports-core-integration-on-SHA'
  CORE_INTEGRATION_COVERAGE_CLOVER_FILENAME: 'core-integration-test-clover.xml'
  CORE_INTEGRATION_COVERAGE_LOGJUNIT_FILENAME: 'core-integration-test-junit.xml'

  INTEGRATION_COVERAGE_ARTIFATC_NAME: 'Coverage-reports-integration-on-SHA'
  INTEGRATION_COVERAGE_CLOVER_FILENAME: 'coverage-integration-test-clover.xml'
  INTEGRATION_COVERAGE_LOGJUNIT_FILENAME: 'coverage-integration-test-junit.xml'

  # Build vars
  REGISTRY: ghcr.io
  PHP_RELEASE_CANDIDATE_IMAGE_NAME: internal-php-rc
  TEST_TAG_PHP_RELEASE_CANDIDATE: medicalmundi/temp-test-rc-img:test
  PHP_TARGET_VERSION: '7.4' # current php version in production
  PHP_NEXT_VERSION: '8.0' # next php version in production


jobs:
  triggering-workflow-info:
    runs-on: ubuntu-18.04
    name: Triggering workflow info
    steps:
      - name: Checkout on branch ${{ github.event.client_payload.ref_name }}|SHA-${{ github.event.client_payload.sha }}
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.workflow_run.head_commit.id }}

      - name: info triggering workflow - branch name ${{ github.event.client_payload.ref_name }}
        run: echo ${{ github.event.client_payload.ref_name }}

      - name: info triggering workflow - SHA ${{ github.event.client_payload.sha }}
        run: echo SHA from triggering workflow ${{ github.event.client_payload.sha }}

      - name: info triggering workflow - commit message
        run: git log --oneline

      - name: info triggering workflow - author '${{ github.event.workflow_run.head_commit.author.name }}' -'${{ github.event.workflow_run.head_commit.author.email }}'
        run: echo author '${{ github.event.workflow_run.head_commit.author.name }}' -'${{ github.event.workflow_run.head_commit.author.email }}'

      - name: info triggering workflow - committer '${{ github.event.workflow_run.head_commit.committer.name }}' -'${{ github.event.workflow_run.head_commit.committer.email }}'
        run: echo author '${{ github.event.workflow_run.head_commit.author.name }}' -'${{ github.event.workflow_run.head_commit.author.email }}'

      - name: Dump context
        uses: crazy-max/ghaction-dump-context@v1


  app-preconditions-checks:
    name: App preconditions checks
    runs-on: ubuntu-18.04
    timeout-minutes: 5
    services:
      pgsql:
        image: postgres:13-alpine
        env:
          POSTGRES_DB: ci-db_test
          POSTGRES_PASSWORD: ci-db-password
          POSTGRES_USER: ci-db-user
        ports:
          - 5432/tcp
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
    strategy:
      matrix:
        php:
          - '7.4'
          - '8.0'
      fail-fast: true
    steps:
      - name: Checkout on branch ${{ github.event.client_payload.ref_name }}|SHA-${{ github.event.client_payload.sha }}
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.client_payload.sha }}

      - name: info triggering workflow - commit message
        run: git log --oneline

      - name: Setup cache environment
        id: cache-php-extensions
        uses: shivammathur/cache-extensions@v1
        with:
          php-version: ${{ matrix.php }}
          extensions: ${{ env.PHP_EXTENSIONS }}
          key: ${{ env.PHP_EXTENSIONS_CACHE_KEY }}

      - name: Cache extensions
        uses: actions/cache@v3
        with:
          path: ${{ steps.cache-php-extensions.outputs.dir }}
          key: ${{ steps.cache-php-extensions.outputs.key }}
          restore-keys: ${{ steps.cache-php-extensions.outputs.key }}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: ${{ env.PHP_EXTENSIONS }}
          ini-values: memory_limit=-1
          tools: composer,composer-normalize:2.16.0

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-scripts --

      - name: Run composer validate
        run: composer validate --strict --ansi

      - name: Run composer normalize
        run: composer-normalize --dry-run --ansi

      - name: Validate configurations files
        run: |
          ./bin/console lint:yaml config/ --ansi

      - name: Validate Symfony containers (prod|dev)
        run: |
          ./bin/console lint:container -e prod --ansi
          ./bin/console lint:container -e dev --ansi

      - name: Validate twig templates
        run: |
          ./bin/console lint:twig templates/ --ansi

#      - name: Run database migrations
#        if: ${{ github.ref_name == 'main' }}
#        run: ./bin/console doctrine:migrations:migrate -e test -n -vv --allow-no-migration --ansi
#        env:
#          DATABASE_URL: postgresql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.pgsql.ports['5432'] }}/ci-db?serverVersion=13&charset=utf8

      - name: Run database schema update
#        if: ${{ github.ref_name != 'main' }}
        run: ./bin/console doctrine:schema:update -e test --force --ansi
        env:
          DATABASE_URL: postgresql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.pgsql.ports['5432'] }}/ci-db?serverVersion=13&charset=utf8

      - name: Run database schema validate
        run: ./bin/console doctrine:schema:validate -e test --ansi
        env:
          DATABASE_URL: postgresql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.pgsql.ports['5432'] }}/ci-db?serverVersion=13&charset=utf8


  artifact-release-candidate:
    name: Build release candidate images
    if: ( !startsWith( github.event.client_payload.ref_name, 'dependabot' ) )
    runs-on: ubuntu-18.04
    permissions:
      packages: write
      contents: read
    strategy:
      matrix:
        php:
          - '7.4'
          - '8.0'
      fail-fast: true
    steps:
      - name: Checkout on branch ${{ github.event.client_payload.ref_name }}|SHA-${{ github.event.client_payload.sha }}
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.client_payload.sha }}

      - name: info triggering workflow - commit message
        run: git log --oneline

      - name: Login to GHCR
        id: docker_ghrc_login
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta_php_release_candidate
        uses: docker/metadata-action@v3
        with:
#          images: |
#            ghcr.io/medicalmundi/${{ env.PHP_RELEASE_CANDIDATE_IMAGE_NAME }}-${{ env.PHP_TARGET_VERSION }}
          images: |
            ghcr.io/medicalmundi/${{ env.PHP_RELEASE_CANDIDATE_IMAGE_NAME }}-${{ matrix.php }}
          tags: |
            type=schedule
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
            type=raw,${{ github.event.client_payload.ref_name }}
            type=raw,${{ github.event.client_payload.sha }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Pre build image PHP
        id: docker_pre_build
        uses: docker/build-push-action@v3
        with:
          context: .
          #file: docker/php/Dockerfile
          file: docker/production/php/Dockerfile
#          build-args: |
#            PHP_BASE_VERSION=${{ env.PHP_TARGET_VERSION }}
          build-args: |
            PHP_BASE_VERSION=${{ matrix.php }}
          platforms: linux/amd64
          load: true
          no-cache: false
          tags: ${{ env.TEST_TAG_PHP_RELEASE_CANDIDATE }}

      - name: Test pre build image PHP
        id: test-builded-image
        run: |
          docker run --rm ${{ env.TEST_TAG_PHP_RELEASE_CANDIDATE }} php -v
          docker run --rm ${{ env.TEST_TAG_PHP_RELEASE_CANDIDATE }} php -m
          docker run --rm ${{ env.TEST_TAG_PHP_RELEASE_CANDIDATE }} php -i
          docker run --rm ${{ env.TEST_TAG_PHP_RELEASE_CANDIDATE }} bin/console lint:container -e prod --verbose
          docker run --rm ${{ env.TEST_TAG_PHP_RELEASE_CANDIDATE }} bin/console lint:container -e dev --verbose
#          docker run --rm ${{ env.TEST_TAG_PHP_RELEASE_CANDIDATE }} bin/console lint:container -e test --verbose

      - name: Test pre build image PHP as not root user
        id: test-builded-image-as-not-root-user
        run: |
          docker run -u application --rm ${{ env.TEST_TAG_PHP_RELEASE_CANDIDATE }} ls -al /app

      - name: Build image
        id: docker_build_php_release_candidate
        uses: docker/build-push-action@v3
        with:
          context: .
          #file: docker/php/Dockerfile
          file: docker/production/php/Dockerfile
#          build-args: |
#            PHP_BASE_VERSION=${{ env.PHP_TARGET_VERSION }}
          build-args: |
            PHP_BASE_VERSION=${{ matrix.php }}
          platforms: linux/amd64
          push: true
          load: false
          no-cache: false
          tags: |
            ${{ steps.meta_php_release_candidate.outputs.tags }}
          #labels: ${{ steps.meta_php_release_candidate.outputs.labels }}


  core-integration-test:
    name: (Core) Integration test
    needs: [app-preconditions-checks]
    runs-on: ubuntu-18.04
    timeout-minutes: 5
    services:
      pgsql:
        image: postgres:13-alpine
        env:
          POSTGRES_DB: ci-db_test
          POSTGRES_PASSWORD: ci-db-password
          POSTGRES_USER: ci-db-user
        ports:
          - 5432/tcp
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
    strategy:
      matrix:
        php:
          - '7.4'
          - '8.0'
        include:
          - php: '7.4'
            coverage: true
      fail-fast: true
    steps:
      - name: Checkout on branch ${{ github.event.client_payload.ref_name }}|SHA-${{ github.event.client_payload.sha }}
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.client_payload.sha }}

      - name: info triggering workflow - commit message
        run: git log --oneline

      - name: Setup cache environment
        id: cache-php-extensions
        uses: shivammathur/cache-extensions@v1
        with:
          php-version: ${{ matrix.php }}
          extensions: ${{ env.PHP_EXTENSIONS }}
          key: ${{ env.PHP_EXTENSIONS_CACHE_KEY }}

      - name: Cache extensions
        uses: actions/cache@v3
        with:
          path: ${{ steps.cache-php-extensions.outputs.dir }}
          key: ${{ steps.cache-php-extensions.outputs.key }}
          restore-keys: ${{ steps.cache-php-extensions.outputs.key }}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: ${{ env.PHP_EXTENSIONS }}
          ini-values: memory_limit=-1
          coverage: xdebug
          tools: composer, symfony

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-${{ matrix.php }}

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-scripts --ansi

#      - name: Run database migrations
#        if: ${{ github.ref_name == 'main' }}
#        run: ./bin/console doctrine:migrations:migrate -e test -n -vv --allow-no-migration --ansi
#        env:
#          DATABASE_URL: postgresql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.pgsql.ports['5432'] }}/ci-db?serverVersion=13&charset=utf8

      - name: Run database schema update
        #        if: ${{ github.ref_name != 'main' }}
        run: ./bin/console doctrine:schema:update -e test --force --ansi
        env:
          DATABASE_URL: postgresql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.pgsql.ports['5432'] }}/ci-db?serverVersion=13&charset=utf8

      - name: Run Core Integration test suite WITHOUT COVERAGE
        if: ( !matrix.coverage )
        run: |
          ./vendor/bin/phpunit --configuration phpunit.core.xml --testsuite integration --group=io-network,io-database
        env:
          DATABASE_URL: postgresql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.pgsql.ports['5432'] }}/ci-db

      - name: Run Core Integration test suite WITH COVERAGE
        id: core-phpunit-integration-test-with-coverage
        if: matrix.coverage
        run: |
          mkdir -p var/tools/phpunit/core
          ./vendor/bin/phpunit --configuration phpunit.core.xml --testsuite integration --group=io-network,io-database \
          --coverage-clover ${{ env.CORE_INTEGRATION_COVERAGE_CLOVER_FILENAME }} \
          --log-junit ${{ env.CORE_INTEGRATION_COVERAGE_LOGJUNIT_FILENAME }}
        env:
          DATABASE_URL: postgresql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.pgsql.ports['5432'] }}/ci-db

      - name: Get Coverage artifact name
        if: matrix.coverage
        id: coverage-artifact-name
        run: echo "::set-output name=name::$CORE_INTEGRATION_COVERAGE_ARTIFATC_NAME-$GITHUB_SHA"

      - name: Save coverage reports
        if: matrix.coverage
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.coverage-artifact-name.outputs.name }}
          path: |
            ${{ env.CORE_INTEGRATION_COVERAGE_CLOVER_FILENAME }}
            ${{ env.CORE_INTEGRATION_COVERAGE_LOGJUNIT_FILENAME }}


  integration-test:
    name: Integration test
    needs: [app-preconditions-checks]
    runs-on: ubuntu-18.04
    timeout-minutes: 5
    services:
      pgsql:
        image: postgres:13-alpine
        env:
          POSTGRES_DB: ci-db_test
          POSTGRES_PASSWORD: ci-db-password
          POSTGRES_USER: ci-db-user
        ports:
          - 5432/tcp
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
    strategy:
      matrix:
        php:
          - '7.4'
          - '8.0'
        include:
          - php: '7.4'
            coverage: true
      fail-fast: true
    steps:
      - name: Checkout on branch ${{ github.event.client_payload.ref_name }}|SHA-${{ github.event.client_payload.sha }}
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.client_payload.sha }}

      - name: info triggering workflow - commit message
        run: git log --oneline

      - name: Setup cache environment
        id: cache-php-extensions
        uses: shivammathur/cache-extensions@v1
        with:
          php-version: ${{ matrix.php }}
          extensions: ${{ env.PHP_EXTENSIONS }}
          key: ${{ env.PHP_EXTENSIONS_CACHE_KEY }}

      - name: Cache extensions
        uses: actions/cache@v3
        with:
          path: ${{ steps.cache-php-extensions.outputs.dir }}
          key: ${{ steps.cache-php-extensions.outputs.key }}
          restore-keys: ${{ steps.cache-php-extensions.outputs.key }}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: ${{ env.PHP_EXTENSIONS }}
          ini-values: memory_limit=-1
          coverage: none
          tools: composer, symfony

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-${{ matrix.php }}

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-scripts --ansi

      #      - name: Run database migrations
      #        if: ${{ github.ref_name == 'main' }}
      #        run: ./bin/console doctrine:migrations:migrate -e test -n -vv --allow-no-migration --ansi
      #        env:
      #          DATABASE_URL: postgresql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.pgsql.ports['5432'] }}/ci-db?serverVersion=13&charset=utf8

      - name: Run database schema update
        #        if: ${{ github.ref_name != 'main' }}
        run: ./bin/console doctrine:schema:update -e test --force --ansi
        env:
          DATABASE_URL: postgresql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.pgsql.ports['5432'] }}/ci-db?serverVersion=13&charset=utf8

      - name: Run webserver
        run: symfony server:start --port=8080 --dir=public --daemon --no-tls

      - name: Run Integration test suite WITHOUT COVERAGE
        if: ( !matrix.coverage )
        run: ./vendor/bin/phpunit tests/Integration
        env:
          SYMFONY_DEPRECATIONS_HELPER: disabled
          DATABASE_URL: postgresql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.pgsql.ports['5432'] }}/ci-db

      - name: Run Integration test suite WITH COVERAGE
        if: ( matrix.coverage )
        run: |
          mkdir -p var/tools/phpunit/core
          ./vendor/bin/phpunit --configuration phpunit.core.xml --testsuite integration --group=io-network,io-database \
          --coverage-clover ${{ env.INTEGRATION_COVERAGE_CLOVER_FILENAME }} \
          --log-junit ${{ env.INTEGRATION_COVERAGE_LOGJUNIT_FILENAME }}
        env:
          DATABASE_URL: postgresql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.pgsql.ports['5432'] }}/ci-db

      - name: Get Coverage artifact name
        if: matrix.coverage
        id: coverage-artifact-name
        run: echo "::set-output name=name::$INTEGRATION_COVERAGE_ARTIFATC_NAME-$GITHUB_SHA"

      - name: Save coverage reports
        if: matrix.coverage
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.coverage-artifact-name.outputs.name }}
          path: |
            ${{ env.INTEGRATION_COVERAGE_CLOVER_FILENAME }}
            ${{ env.INTEGRATION_COVERAGE_LOGJUNIT_FILENAME }}


  functional-test:
    name: Functional test
    needs: [app-preconditions-checks]
    runs-on: ubuntu-18.04
    timeout-minutes: 5
    services:
      pgsql:
        image: postgres:13-alpine
        env:
          POSTGRES_DB: ci-db_test
          POSTGRES_PASSWORD: ci-db-password
          POSTGRES_USER: ci-db-user
        ports:
          - 5432/tcp
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
    strategy:
      matrix:
        php:
          - '7.4'
          - '8.0'
      fail-fast: true
    steps:
      - name: Checkout on branch ${{ github.event.client_payload.ref_name }}|SHA-${{ github.event.client_payload.sha }}
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.client_payload.sha }}

      - name: info triggering workflow - commit message
        run: git log --oneline

      - name: Setup cache environment
        id: cache-php-extensions
        uses: shivammathur/cache-extensions@v1
        with:
          php-version: ${{ matrix.php }}
          extensions: ${{ env.PHP_EXTENSIONS }}
          key: ${{ env.PHP_EXTENSIONS_CACHE_KEY }}

      - name: Cache extensions
        uses: actions/cache@v3
        with:
          path: ${{ steps.cache-php-extensions.outputs.dir }}
          key: ${{ steps.cache-php-extensions.outputs.key }}
          restore-keys: ${{ steps.cache-php-extensions.outputs.key }}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: ${{ env.PHP_EXTENSIONS }}
          ini-values: memory_limit=-1
          coverage: none
          tools: composer, symfony

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-${{ matrix.php }}

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-scripts --ansi

#      - name: Run database migrations
#        if: ${{ github.ref_name == 'main' }}
#        run: ./bin/console doctrine:migrations:migrate -e test -n -vv --allow-no-migration --ansi
#        env:
#          DATABASE_URL: postgresql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.pgsql.ports['5432'] }}/ci-db?serverVersion=13&charset=utf8

      - name: Run database schema update
        #        if: ${{ github.ref_name != 'main' }}
        run: ./bin/console doctrine:schema:update -e test --force --ansi
        env:
          DATABASE_URL: postgresql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.pgsql.ports['5432'] }}/ci-db?serverVersion=13&charset=utf8

      - name: Run webserver
        run: symfony server:start --port=8080 --dir=public --daemon --no-tls

      - name: Run functional test suite
        run: ./vendor/bin/phpunit tests/Functional
        env:
          SYMFONY_DEPRECATIONS_HELPER: disabled
          DATABASE_URL: postgresql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.pgsql.ports['5432'] }}/ci-db


#  prod-stack-env:
#    needs: [app-preconditions-checks, artifact-release-candidate]
#    runs-on: ubuntu-18.04
#    timeout-minutes: 10
#    permissions:
#      packages: read
#      contents: read
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#
#      - name: Start services
#        run: docker-compose -f docker-compose.ci-gha.yml up -d
#        env:
#          RELEASE_CANDIDATE_TAG: ${{ github.event.client_payload.sha }}
#
##      - name: Wait for services
##        run: |
##          while status="$(docker inspect --format="{{if .Config.Healthcheck}}{{print .State.Health.Status}}{{end}}" "$(docker-compose -f docker-compose.ci-gha.yml ps -q php)")"; do
##            case $status in
##              starting) sleep 1;;
##              healthy) exit 0;;
##              unhealthy)
##                docker-compose -f docker-compose.ci-gha.yml ps
##                docker-compose -f docker-compose.ci-gha.yml logs
##                exit 1
##              ;;
##            esac
##          done
##          exit 1
#
#      - name: services list
#        run: docker-compose -f docker-compose.ci-gha.yml ps
#
#      - name: Doctrine Schema Validator
#        run: docker-compose -f docker-compose.ci-gha.yml exec -T php bin/console doctrine:schema:validate --skip-sync
#        continue-on-error: false
#
#      - name: Doctrine Schema Update
#        run: docker-compose -f docker-compose.ci-gha.yml exec -T php bin/console doctrine:schema:update --force -vvv
#        continue-on-error: false
#
#      - name: Check HTTP reachability (localhost)
#        run: curl -v -o /dev/null http://localhost
#        continue-on-error: false
#
#      - name: Check HTTP reachability (127.0.0.1)
#        run: curl -v -o /dev/null http://127.0.0.1
#        continue-on-error: false
#
#      - name: Check HTTP reachability (healtcheck)
#        run: curl -v -o /dev/null http://127.0.0.1/sys/healt/check
#        continue-on-error: false
#
#      - name: Check HTTPS reachability
#        run: curl  -vk -o /dev/null https://127.0.0.1
#        continue-on-error: false
#
#      - name: Check HTTPS reachability (healtcheck)
#        run: curl  -vk -o /dev/null https://127.0.0.1/sys/healt/check
#        continue-on-error: false
#
#      - name: Show application log
#        run: |
#          docker-compose -f docker-compose.ci-gha.yml logs php
#          docker-compose -f docker-compose.ci-gha.yml exec -T php ls -al /app/var/log
#          docker-compose -f docker-compose.ci-gha.yml exec -T php ls -al /app/var/cache
#        continue-on-error: true
#
#      - name: Stop services
#        run: docker-compose -f docker-compose.ci-gha.yml down -v --remove-orphans


#  test-stack-env:
#    needs: [app-preconditions-checks, artifact-release-candidate]
#    runs-on: ubuntu-18.04
#    timeout-minutes: 10
#    permissions:
#      packages: read
#      contents: read
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#
#      - name: Start services
#        run: docker-compose -f docker-compose.ci-gha.yml up -d
#        env:
#          RELEASE_CANDIDATE_TAG: ${{ github.event.client_payload.sha }}
#          APP_ENV: test
#          POSTGRES_DB: ci-db-name_test
#
#      #      - name: Wait for services
#      #        run: |
#      #          while status="$(docker inspect --format="{{if .Config.Healthcheck}}{{print .State.Health.Status}}{{end}}" "$(docker-compose -f docker-compose.ci-gha.yml ps -q php)")"; do
#      #            case $status in
#      #              starting) sleep 1;;
#      #              healthy) exit 0;;
#      #              unhealthy)
#      #                docker-compose -f docker-compose.ci-gha.yml ps
#      #                docker-compose -f docker-compose.ci-gha.yml logs
#      #                exit 1
#      #              ;;
#      #            esac
#      #          done
#      #          exit 1
#
#      - name: services list
#        run: docker-compose -f docker-compose.ci-gha.yml ps
#
#      - name: Doctrine Schema Validator
#        run: docker-compose -f docker-compose.ci-gha.yml exec -T php bin/console doctrine:schema:validate --skip-sync
#        continue-on-error: false
#
#      - name: Doctrine Schema Update
#        run: docker-compose -f docker-compose.ci-gha.yml exec -T php bin/console doctrine:schema:update --force -vvv
#        continue-on-error: false
#
#      - name: Check HTTP reachability (localhost)
#        run: curl -v -o /dev/null http://localhost
#        continue-on-error: false
#
#      - name: Check HTTP reachability (127.0.0.1)
#        run: curl -v -o /dev/null http://127.0.0.1
#        continue-on-error: false
#
#      - name: Check HTTP reachability (healtcheck)
#        run: curl -v -o /dev/null http://127.0.0.1/sys/healt/check
#        continue-on-error: false
#
#      - name: Check HTTPS reachability
#        run: curl  -vk -o /dev/null https://127.0.0.1
#        continue-on-error: false
#
#      - name: Check HTTPS reachability (healtcheck)
#        run: curl  -vk -o /dev/null https://127.0.0.1/sys/healt/check
#        continue-on-error: false
#
#      - name: Show application log
#        run: |
#          docker-compose -f docker-compose.ci-gha.yml logs php
#          docker-compose -f docker-compose.ci-gha.yml exec -T php ls -al /app/var/log
#          docker-compose -f docker-compose.ci-gha.yml exec -T php ls -al /app/var/cache
#        continue-on-error: true
#
#      - name: Stop services
#        run: docker-compose -f docker-compose.ci-gha.yml down -v --remove-orphans


  e2e_prod-stack-env:
    name: E2E on production stack
    needs: [app-preconditions-checks, artifact-release-candidate]
    runs-on: ubuntu-18.04
    timeout-minutes: 10
    permissions:
      packages: read
      contents: read
    steps:
      - name: Checkout on branch ${{ github.event.client_payload.ref_name }}|SHA-${{ github.event.client_payload.sha }}
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.client_payload.sha }}

      - name: info triggering workflow - commit message
        run: git log --oneline

      - name: Start services
        run: docker-compose -f docker-compose.ci-gha.yml up -d
        env:
          PHP_RELEASE_CANDIDATE_IMAGE_NAME: ${{ env.PHP_RELEASE_CANDIDATE_IMAGE_NAME }}-${{ env.PHP_TARGET_VERSION }}
          RELEASE_CANDIDATE_TAG: ${{ github.event.client_payload.sha }}

      #      - name: Wait for services
      #        run: |
      #          while status="$(docker inspect --format="{{if .Config.Healthcheck}}{{print .State.Health.Status}}{{end}}" "$(docker-compose -f docker-compose.ci-gha.yml ps -q php)")"; do
      #            case $status in
      #              starting) sleep 1;;
      #              healthy) exit 0;;
      #              unhealthy)
      #                docker-compose -f docker-compose.ci-gha.yml ps
      #                docker-compose -f docker-compose.ci-gha.yml logs
      #                exit 1
      #              ;;
      #            esac
      #          done
      #          exit 1

      - name: services list
        run: docker-compose -f docker-compose.ci-gha.yml ps

      - name: Doctrine Schema Validator
        run: docker-compose -f docker-compose.ci-gha.yml exec -T php bin/console doctrine:schema:validate --skip-sync
        continue-on-error: false

      - name: Doctrine Schema Update
        run: docker-compose -f docker-compose.ci-gha.yml exec -T php bin/console doctrine:schema:update --force -vvv
        continue-on-error: false

      - name: Check HTTP reachability (localhost)
        run: curl -v -o /dev/null http://localhost
        continue-on-error: false

      - name: Check HTTP reachability (127.0.0.1)
        run: curl -v -o /dev/null http://127.0.0.1
        continue-on-error: false

      - name: Check HTTP reachability (healtcheck)
        run: curl -v -o /dev/null http://127.0.0.1/sys/healt/check
        continue-on-error: false

      - name: Check HTTPS reachability
        run: curl  -vk -o /dev/null https://127.0.0.1
        continue-on-error: false

      - name: Check HTTPS reachability (healtcheck)
        run: curl  -vk -o /dev/null https://127.0.0.1/sys/healt/check
        continue-on-error: false

      - name: Show application log
        run: |
          docker-compose -f docker-compose.ci-gha.yml logs php
          docker-compose -f docker-compose.ci-gha.yml exec -T php ls -al /app/var/log
          docker-compose -f docker-compose.ci-gha.yml exec -T php ls -al /app/var/cache
        continue-on-error: true

      - name: Setup cache environment
        id: cache-php-extensions
        uses: shivammathur/cache-extensions@v1
        with:
          php-version: '7.4'
          extensions: ${{ env.PHP_EXTENSIONS }}
          key: ${{ env.PHP_EXTENSIONS_CACHE_KEY }}

      - name: Cache extensions
        uses: actions/cache@v3
        with:
          path: ${{ steps.cache-php-extensions.outputs.dir }}
          key: ${{ steps.cache-php-extensions.outputs.key }}
          restore-keys: ${{ steps.cache-php-extensions.outputs.key }}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'
          extensions: ${{ env.PHP_EXTENSIONS }}
          ini-values: memory_limit=-1
          tools: composer,composer-normalize:2.16.0

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-scripts --

      - name: Run E2E test on production stak
        run: ./vendor/bin/phpunit tests/E2E --testdox
        env:
          SYMFONY_DEPRECATIONS_HELPER: disabled
          #DATABASE_URL: postgresql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.pgsql.ports['5432'] }}/ci-db

      - name: Stop services
        run: docker-compose -f docker-compose.ci-gha.yml down -v --remove-orphans


  behat-test-standard:
    name: Behat test standard
    needs: [app-preconditions-checks]
    runs-on: ubuntu-18.04
    timeout-minutes: 10
    services:
      pgsql:
        image: postgres:13-alpine
        env:
          POSTGRES_DB: ci-db_test
          POSTGRES_PASSWORD: ci-db-password
          POSTGRES_USER: ci-db-user
        ports:
          - 5432/tcp
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
    strategy:
      matrix:
        php:
          - '7.4'
          - '8.0'
      fail-fast: true
    steps:
      - name: Checkout on branch ${{ github.event.client_payload.ref_name }}|SHA-${{ github.event.client_payload.sha }}
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.client_payload.sha }}

      - name: info triggering workflow - commit message
        run: git log --oneline

      - name: Setup cache environment
        id: cache-php-extensions
        uses: shivammathur/cache-extensions@v1
        with:
          php-version: ${{ matrix.php }}
          extensions: ${{ env.PHP_EXTENSIONS }}
          key: ${{ env.PHP_EXTENSIONS_CACHE_KEY }}

      - name: Cache extensions
        uses: actions/cache@v3
        with:
          path: ${{ steps.cache-php-extensions.outputs.dir }}
          key: ${{ steps.cache-php-extensions.outputs.key }}
          restore-keys: ${{ steps.cache-php-extensions.outputs.key }}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: ${{ env.PHP_EXTENSIONS }}
          ini-values: memory_limit=-1
          coverage: none
          tools: composer, symfony

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-${{ matrix.php }}

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-scripts --ansi

      #      - name: Run database migrations
      #        if: ${{ github.ref_name == 'main' }}
      #        run: ./bin/console doctrine:migrations:migrate -e test -n -vv --allow-no-migration --ansi
      #        env:
      #          DATABASE_URL: postgresql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.pgsql.ports['5432'] }}/ci-db?serverVersion=13&charset=utf8

      - name: Run database schema update
        #        if: ${{ github.ref_name != 'main' }}
        run: ./bin/console doctrine:schema:update -e test --force --ansi
        env:
          DATABASE_URL: postgresql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.pgsql.ports['5432'] }}/ci-db?serverVersion=13&charset=utf8

      - name: Setup firefox
        uses: browser-actions/setup-firefox@latest
        with:
          firefox-version: 'latest'

      - run: firefox --version

      - name: Download firefox driver
        run: ./vendor/bin/bdi driver:geckodriver --os=linux drivers

      - name: Run webserver
        run: symfony server:start --port=8080 --dir=public --daemon --no-tls

      - name: Run behat front testsuite
        run: ./vendor/bin/behat -s front --colors
        env:
          PANTHER_EXTERNAL_BASE_URI: http://127.0.0.1:8080
          SYMFONY_DEPRECATIONS_HELPER: disabled
          DATABASE_URL: postgresql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.pgsql.ports['5432'] }}/ci-db

      - name: Run behat backoffice testsuite
        run: ./vendor/bin/behat -s backoffice --colors
        env:
          PANTHER_EXTERNAL_BASE_URI: http://127.0.0.1:8080
          SYMFONY_DEPRECATIONS_HELPER: disabled
          DATABASE_URL: postgresql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.pgsql.ports['5432'] }}/ci-db


  behat-test-on-prod-stack:
    name: Behat on production stack
    needs: [app-preconditions-checks, artifact-release-candidate]
    runs-on: ubuntu-18.04
    timeout-minutes: 10
    permissions:
      packages: read
      contents: read
    strategy:
      matrix:
        php:
          - '7.4'
          - '8.0'
    steps:
      - name: Checkout on branch ${{ github.event.client_payload.ref_name }}|SHA-${{ github.event.client_payload.sha }}
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.client_payload.sha }}

      - name: info triggering workflow - commit message
        run: git log --oneline

      - name: Start services
        run: docker-compose -f docker-compose.ci-gha.yml up -d
        env:
#          PHP_RELEASE_CANDIDATE_IMAGE_NAME: ${{ env.PHP_RELEASE_CANDIDATE_IMAGE_NAME }}-${{ env.PHP_TARGET_VERSION }}
          PHP_RELEASE_CANDIDATE_IMAGE_NAME: ${{ env.PHP_RELEASE_CANDIDATE_IMAGE_NAME }}-${{ matrix.php }}
          RELEASE_CANDIDATE_TAG: ${{ github.event.client_payload.sha }}

      #      - name: Wait for services
      #        run: |
      #          while status="$(docker inspect --format="{{if .Config.Healthcheck}}{{print .State.Health.Status}}{{end}}" "$(docker-compose -f docker-compose.ci-gha.yml ps -q php)")"; do
      #            case $status in
      #              starting) sleep 1;;
      #              healthy) exit 0;;
      #              unhealthy)
      #                docker-compose -f docker-compose.ci-gha.yml ps
      #                docker-compose -f docker-compose.ci-gha.yml logs
      #                exit 1
      #              ;;
      #            esac
      #          done
      #          exit 1

      - name: services list
        run: docker-compose -f docker-compose.ci-gha.yml ps

      - name: Doctrine Schema Validator
        run: docker-compose -f docker-compose.ci-gha.yml exec -T php bin/console doctrine:schema:validate --skip-sync
        continue-on-error: false

      - name: Doctrine Schema Update
        run: docker-compose -f docker-compose.ci-gha.yml exec -T php bin/console doctrine:schema:update --force -vvv
        continue-on-error: false

      - name: Check HTTP reachability (localhost)
        run: curl -v -o /dev/null http://localhost
        continue-on-error: false

      - name: Check HTTP reachability (127.0.0.1)
        run: curl -v -o /dev/null http://127.0.0.1
        continue-on-error: false

      - name: Check HTTP reachability (healtcheck)
        run: curl -v -o /dev/null http://127.0.0.1/sys/healt/check
        continue-on-error: false

      - name: Check HTTPS reachability
        run: curl  -vk -o /dev/null https://127.0.0.1
        continue-on-error: false

      - name: Check HTTPS reachability (healtcheck)
        run: curl  -vk -o /dev/null https://127.0.0.1/sys/healt/check
        continue-on-error: false

      - name: Show application log
        run: |
          docker-compose -f docker-compose.ci-gha.yml logs php
          docker-compose -f docker-compose.ci-gha.yml exec -T php ls -al /app/var/log
          docker-compose -f docker-compose.ci-gha.yml exec -T php ls -al /app/var/cache
        continue-on-error: true

      - name: Setup cache environment
        id: cache-php-extensions
        uses: shivammathur/cache-extensions@v1
        with:
          php-version: ${{ matrix.php }}
          extensions: ${{ env.PHP_EXTENSIONS }}
          key: ${{ env.PHP_EXTENSIONS_CACHE_KEY }}

      - name: Cache extensions
        uses: actions/cache@v3
        with:
          path: ${{ steps.cache-php-extensions.outputs.dir }}
          key: ${{ steps.cache-php-extensions.outputs.key }}
          restore-keys: ${{ steps.cache-php-extensions.outputs.key }}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: ${{ env.PHP_EXTENSIONS }}
          ini-values: memory_limit=-1
          tools: composer,composer-normalize:2.16.0

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-scripts --

      - name: Run behat front testsuite on production stack
        run: ./vendor/bin/behat -s front --colors
        env:
          SYMFONY_DEPRECATIONS_HELPER: disabled
          #DATABASE_URL: postgresql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.pgsql.ports['5432'] }}/ci-db

      - name: Run behat backoffice testsuite on production stack
        run: ./vendor/bin/behat -s backoffice --colors
        env:
          SYMFONY_DEPRECATIONS_HELPER: disabled
          #DATABASE_URL: postgresql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.pgsql.ports['5432'] }}/ci-db

      - name: Stop services
        run: docker-compose -f docker-compose.ci-gha.yml down -v --remove-orphans
