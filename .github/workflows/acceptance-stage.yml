name: Acceptance stage

on:
#  schedule:
#    # * is a special character in YAML so you have to quote this string
#    - cron:  '*/5 * * * *'

  repository_dispatch:
    types: [commit-stage-was-completed-successfully]


env:
  GITHUB_PAT: ${{ secrets.MEMUJOB_CI_GHA_PAT }}
  PHP_RELEASE_CANDIDATE_IMAGE_NAME: internal-php-rc
  PHP_EXTENSIONS: ctype, curl, gd, iconv, intl, opcache, openssl, mbstring, mysql, pdo_sqlite
  PHP_EXTENSIONS_CACHE_KEY: cache-php-extensions-v1

  TEST_TAG_PHP_RELEASE_CANDIDATE: medicalmundi/temp-test-rc-img:test

  REGISTRY: ghcr.io
  #IMAGE_NAME: ${{ github.repository }}


jobs:
  triggering-workflow-info:
    runs-on: ubuntu-18.04
    name: Triggering workflow info
    steps:
      - name: Checkout on branch ${{ github.event.client_payload.ref_name }}|SHA-${{ github.event.client_payload.sha }}
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.workflow_run.head_commit.id }}

      - name: info triggering workflow - branch name ${{ github.event.client_payload.ref_name }}
        run: echo ${{ github.event.client_payload.ref_name }}

      - name: info triggering workflow - SHA ${{ github.event.client_payload.sha }}
        run: echo SHA from triggering workflow ${{ github.event.client_payload.sha }}

      - name: info triggering workflow - commit message
        run: echo commit message from triggering workflow '${{ github.event.client_payload.commit_message }}'

      - name: info triggering workflow - author '${{ github.event.workflow_run.head_commit.author.name }}' -'${{ github.event.workflow_run.head_commit.author.email }}'
        run: echo author '${{ github.event.workflow_run.head_commit.author.name }}' -'${{ github.event.workflow_run.head_commit.author.email }}'

      - name: info triggering workflow - committer '${{ github.event.workflow_run.head_commit.committer.name }}' -'${{ github.event.workflow_run.head_commit.committer.email }}'
        run: echo author '${{ github.event.workflow_run.head_commit.author.name }}' -'${{ github.event.workflow_run.head_commit.author.email }}'

      - name: Dump context
        uses: crazy-max/ghaction-dump-context@v1


  artifact-release-candidate:
    name: Create release candidate images
    runs-on: ubuntu-18.04
    permissions:
      packages: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.client_payload.sha }}
      - run: echo sha-${{ github.event.client_payload.sha }}
      - run: echo ref- ${{ github.event.client_payload.ref }}

      - name: Login to GHCR
        id: docker_ghrc_login
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: |
            ghcr.io/medicalmundi/${{ env.PHP_RELEASE_CANDIDATE_IMAGE_NAME }}
          tags: |
            type=schedule
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
            type=raw,${{ github.event.client_payload.ref_name }}
            type=raw,${{ github.event.client_payload.sha }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Pre build image
        id: docker_pre_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker/php/Dockerfile
          #platforms: linux/amd64,linux/arm64
          platforms: linux/amd64
          load: true
          no-cache: false
          tags: ${{ env.TEST_TAG_PHP_RELEASE_CANDIDATE }}

      - name: Test image
        id: test-builded-image
        run: |
          docker run --rm ${{ env.TEST_TAG_PHP_RELEASE_CANDIDATE }} php -v
          docker run --rm ${{ env.TEST_TAG_PHP_RELEASE_CANDIDATE }} php -m
          docker run --rm ${{ env.TEST_TAG_PHP_RELEASE_CANDIDATE }} php -i
          docker run --rm ${{ env.TEST_TAG_PHP_RELEASE_CANDIDATE }} bin/console lint:container -e prod --verbose
          docker run --rm ${{ env.TEST_TAG_PHP_RELEASE_CANDIDATE }} bin/console lint:container -e dev --verbose
          docker run --rm ${{ env.TEST_TAG_PHP_RELEASE_CANDIDATE }} bin/console lint:container -e test --verbose

      - name: Test image as not root user
        id: test-builded-image-as-not-root-user
        run: |
          docker run -u application --rm ${{ env.TEST_TAG_PHP_RELEASE_CANDIDATE }} ls -al /app

      - name: Build image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker/php/Dockerfile
          #platforms: linux/amd64,linux/arm64
          platforms: linux/amd64
          push: true
          load: false
          no-cache: false
          tags: |
            ${{ steps.meta.outputs.tags }}
          #labels: ${{ steps.meta.outputs.labels }}


  prod-stack-env:
    needs: [artifact-release-candidate]
    runs-on: ubuntu-18.04
    timeout-minutes: 10
    permissions:
      packages: read
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Start services
        run: docker-compose -f docker-compose.ci-gha.yml up -d
        env:
          MEMU_JOB_VERSION: ${{ github.event.client_payload.sha }}

#      - name: Wait for services
#        run: |
#          while status="$(docker inspect --format="{{if .Config.Healthcheck}}{{print .State.Health.Status}}{{end}}" "$(docker-compose -f docker-compose.ci-gha.yml ps -q php)")"; do
#            case $status in
#              starting) sleep 1;;
#              healthy) exit 0;;
#              unhealthy)
#                docker-compose -f docker-compose.ci-gha.yml ps
#                docker-compose -f docker-compose.ci-gha.yml logs
#                exit 1
#              ;;
#            esac
#          done
#          exit 1

      - name: services list
        run: docker-compose -f docker-compose.ci-gha.yml ps

      - name: Doctrine Schema Validator
        run: docker-compose -f docker-compose.ci-gha.yml exec -T php bin/console doctrine:schema:validate --skip-sync
        continue-on-error: false

      - name: Doctrine Schema Update
        run: docker-compose -f docker-compose.ci-gha.yml exec -T php bin/console doctrine:schema:update --force -vvv
        continue-on-error: false

      - name: Check HTTP reachability (localhost)
        run: curl -v -o /dev/null http://localhost
        continue-on-error: false

      - name: Check HTTP reachability (127.0.0.1)
        run: curl -v -o /dev/null http://127.0.0.1
        continue-on-error: false

      - name: Check HTTP reachability (healtcheck)
        run: curl -v -o /dev/null http://127.0.0.1/sys/healt/check
        continue-on-error: false

      - name: Check HTTPS reachability
        run: curl  -vk -o /dev/null https://127.0.0.1
        continue-on-error: false

      - name: Check HTTPS reachability (healtcheck)
        run: curl  -vk -o /dev/null https://127.0.0.1/sys/healt/check
        continue-on-error: false

      - name: Show application log
        run: |
          docker-compose -f docker-compose.ci-gha.yml logs php
          docker-compose -f docker-compose.ci-gha.yml exec -T php ls -al /app/var/log
          docker-compose -f docker-compose.ci-gha.yml exec -T php ls -al /app/var/cache
        continue-on-error: true

      - name: Stop services
        run: docker-compose -f docker-compose.ci-gha.yml down -v --remove-orphans

  test-stack-env:
    needs: [artifact-release-candidate]
    runs-on: ubuntu-18.04
    timeout-minutes: 10
    permissions:
      packages: read
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Start services
        run: docker-compose -f docker-compose.ci-gha.yml up -d
        env:
          MEMU_JOB_VERSION: ${{ github.event.client_payload.sha }}
          APP_ENV: test
          POSTGRES_DB: ci-db-name_test

      #      - name: Wait for services
      #        run: |
      #          while status="$(docker inspect --format="{{if .Config.Healthcheck}}{{print .State.Health.Status}}{{end}}" "$(docker-compose -f docker-compose.ci-gha.yml ps -q php)")"; do
      #            case $status in
      #              starting) sleep 1;;
      #              healthy) exit 0;;
      #              unhealthy)
      #                docker-compose -f docker-compose.ci-gha.yml ps
      #                docker-compose -f docker-compose.ci-gha.yml logs
      #                exit 1
      #              ;;
      #            esac
      #          done
      #          exit 1

      - name: services list
        run: docker-compose -f docker-compose.ci-gha.yml ps

      - name: Doctrine Schema Validator
        run: docker-compose -f docker-compose.ci-gha.yml exec -T php bin/console doctrine:schema:validate --skip-sync
        continue-on-error: false

      - name: Doctrine Schema Update
        run: docker-compose -f docker-compose.ci-gha.yml exec -T php bin/console doctrine:schema:update --force -vvv
        continue-on-error: false

      - name: Check HTTP reachability (localhost)
        run: curl -v -o /dev/null http://localhost
        continue-on-error: false

      - name: Check HTTP reachability (127.0.0.1)
        run: curl -v -o /dev/null http://127.0.0.1
        continue-on-error: false

      - name: Check HTTP reachability (healtcheck)
        run: curl -v -o /dev/null http://127.0.0.1/sys/healt/check
        continue-on-error: false

      - name: Check HTTPS reachability
        run: curl  -vk -o /dev/null https://127.0.0.1
        continue-on-error: false

      - name: Check HTTPS reachability (healtcheck)
        run: curl  -vk -o /dev/null https://127.0.0.1/sys/healt/check
        continue-on-error: false

      - name: Show application log
        run: |
          docker-compose -f docker-compose.ci-gha.yml logs php
          docker-compose -f docker-compose.ci-gha.yml exec -T php ls -al /app/var/log
          docker-compose -f docker-compose.ci-gha.yml exec -T php ls -al /app/var/cache
        continue-on-error: true

      - name: Stop services
        run: docker-compose -f docker-compose.ci-gha.yml down -v --remove-orphans
