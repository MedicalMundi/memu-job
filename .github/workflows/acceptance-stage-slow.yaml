name: Acceptance stage

on:
  workflow_call:
    # Map the workflow outputs to job outputs
    inputs:
      triggering-sha:
        required: true
        type: string


env:
  GITHUB_PAT: ${{ secrets.MEMUJOB_CI_GHA_PAT }}
  PHP_EXTENSIONS: ctype, curl, gd, iconv, intl, opcache, openssl, mbstring, mysql, pdo_sqlite
  PHP_EXTENSIONS_CACHE_KEY: cache-php-extensions-v1

  CORE_INTEGRATION_COVERAGE_ARTIFATC_NAME: 'Coverage-reports-core-integration-on-SHA'
  CORE_INTEGRATION_COVERAGE_CLOVER_FILENAME: 'core-integration-test-clover.xml'
  CORE_INTEGRATION_COVERAGE_LOGJUNIT_FILENAME: 'core-integration-test-junit.xml'

  INTEGRATION_COVERAGE_ARTIFATC_NAME: 'Coverage-reports-integration-on-SHA'
  INTEGRATION_COVERAGE_CLOVER_FILENAME: 'coverage-integration-test-clover.xml'
  INTEGRATION_COVERAGE_LOGJUNIT_FILENAME: 'coverage-integration-test-junit.xml'

  # Build vars
#  REGISTRY: ghcr.io
#  PHP_RELEASE_CANDIDATE_IMAGE_NAME: internal-php-rc
#  TEST_TAG_PHP_RELEASE_CANDIDATE: medicalmundi/temp-test-php-rc-img:test
#  PHP_TARGET_VERSION: '8.0' # current php version in production (based on webdevops/php)
#  PHP_NEXT_VERSION: '8.0' # next php version in production (based on webdevops/php)
#
#  NGINX_RELEASE_CANDIDATE_IMAGE_NAME: internal-nginx-rc
#  TEST_TAG_NGINX_RELEASE_CANDIDATE: medicalmundi/temp-test-nginx-rc-img:test
#  NGINX_TARGET_VERSION: 'alpine' # current nginx version in production (based on webdevops/nginx)
#  NGINX_NEXT_VERSION: '8.0' # next nginx version in production (based on webdevops/nginx)


jobs:
  triggering-workflow-info:
    if: ${{ vars.SHOW_WORKFLOW_INFO == '1'}}
    runs-on: ubuntu-20.04
    name: Show workflow info
    steps:
      - name: Dump context
        if: ${{ vars.SHOW_WORKFLOW_INFO == '1'}}
        uses: crazy-max/ghaction-dump-context@v2


  app-preconditions-checks:
    name: App preconditions checks
    runs-on: ubuntu-20.04
    timeout-minutes: 7
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: no
          MYSQL_DATABASE: ci-db_test
          MYSQL_USER: ci-db-user
          MYSQL_PASSWORD: ci-db-password
        ports:
          - 3306/tcp
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    strategy:
      matrix:
        php:
          - '8.0'
      fail-fast: true
    steps:
      - name: Checkout on SHA-${{ inputs.triggering-sha }}
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.triggering-sha }}

      - name: Show CI job info (dump context)
        if: ${{ vars.SHOW_WORKFLOW_INFO == '1'}}
        uses: crazy-max/ghaction-dump-context@v2

      - name: Setup cache environment
        id: cache-php-extensions
        if: ${{ vars.USE_PHP_EXTENSION_CACHE  == '1' }}
        uses: shivammathur/cache-extensions@v1
        with:
          php-version: ${{ matrix.php }}
          extensions: ${{ env.PHP_EXTENSIONS }}
          key: ${{ env.PHP_EXTENSIONS_CACHE_KEY }}

      - name: Cache extensions
        if: ${{ vars.USE_PHP_EXTENSION_CACHE  == '1' }}
        uses: actions/cache@v3
        with:
          path: ${{ steps.cache-php-extensions.outputs.dir }}
          key: ${{ steps.cache-php-extensions.outputs.key }}
          restore-keys: ${{ steps.cache-php-extensions.outputs.key }}

      - name: Setup PHP
        uses: shivammathur/setup-php@2.25.4
        with:
          php-version: ${{ matrix.php }}
          extensions: ${{ env.PHP_EXTENSIONS }}
          ini-values: memory_limit=-1
          coverage: xdebug
          tools: symfony

      - name: Setup Composer Cache Directory
        if: ${{ vars.USE_COMPOSER_CACHE  == '1' }}
        id: composer-cache
        run: |
          echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        if: ${{ vars.USE_COMPOSER_CACHE  == '1' }}
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-php-${{ matrix.php }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-${{ matrix.php }}-composer-

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-scripts --

      - name: Validate configurations files
        run: |
          ./bin/console lint:yaml config/ --ansi

      - name: Validate Symfony containers (prod|dev)
        run: |
          ./bin/console lint:container -e prod --ansi
          ./bin/console lint:container -e dev --ansi

      - name: Validate twig templates
        run: |
          ./bin/console lint:twig templates/ --ansi

      - name: Run database migrations
        if: ${{ github.ref_name == 'main' }}
        run: ./bin/console doctrine:migrations:migrate -e test -n -vv --allow-no-migration --ansi
        env:
          DATABASE_URL: mysql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.mysql.ports['3306'] }}/ci-db?serverVersion=8.0&charset=utf8mb4
        # TODO
        # DOPO LE MIGRATION ESEGUIRE CONTROLLO SCHEMA VALIDATE
        # EVENTUALMENTE FAIL FAST, NO INTEGRATION, NO FUNCTIONAL

      - name: Run database validate After migration
        if: ${{ github.ref_name == 'main' }}
        run: ./bin/console doctrine:schema:validate -e test --ansi
        env:
          DATABASE_URL: mysql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.mysql.ports['3306'] }}/ci-db?serverVersion=8.0&charset=utf8mb4

      - name: Run database schema update
        if: ${{ github.ref_name != 'main' }}
        run: ./bin/console doctrine:schema:update -e test --force --ansi
        continue-on-error: false
        env:
          DATABASE_URL: mysql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.mysql.ports['3306'] }}/ci-db?serverVersion=8.0&charset=utf8mb4

      - name: Run database schema validate
        run: ./bin/console doctrine:schema:validate -e test --ansi
        env:
          DATABASE_URL: mysql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.mysql.ports['3306'] }}/ci-db?serverVersion=8.0&charset=utf8mb4


  integration-test:
    name: Integration test ${{ matrix.php }}
    needs: [app-preconditions-checks]
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: no
          MYSQL_DATABASE: ci-db_test
          MYSQL_USER: ci-db-user
          MYSQL_PASSWORD: ci-db-password
        ports:
          - 3306/tcp
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    strategy:
      matrix:
        php:
          - '8.0'
        generate-coverage-report: [true]
#        include:
#          - php: '8.1'
#            generate-coverage-report: false
      fail-fast: true
    steps:
      - name: Checkout on SHA-${{ inputs.triggering-sha }}
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.triggering-sha }}

      - name: Show CI job info (dump context)
        if: ${{ vars.SHOW_WORKFLOW_INFO == '1'}}
        uses: crazy-max/ghaction-dump-context@v2

      - name: Setup cache environment
        id: cache-php-extensions
        if: ${{ vars.USE_PHP_EXTENSION_CACHE  == '1' }}
        uses: shivammathur/cache-extensions@v1
        with:
          php-version: ${{ matrix.php }}
          extensions: ${{ env.PHP_EXTENSIONS }}
          key: ${{ env.PHP_EXTENSIONS_CACHE_KEY }}

      - name: Cache extensions
        if: ${{ vars.USE_PHP_EXTENSION_CACHE  == '1' }}
        uses: actions/cache@v3
        with:
          path: ${{ steps.cache-php-extensions.outputs.dir }}
          key: ${{ steps.cache-php-extensions.outputs.key }}
          restore-keys: ${{ steps.cache-php-extensions.outputs.key }}

      - name: Setup PHP
        uses: shivammathur/setup-php@2.25.4
        with:
          php-version: ${{ matrix.php }}
          extensions: ${{ env.PHP_EXTENSIONS }}
          ini-values: memory_limit=-1
          coverage: xdebug
          tools: symfony

      - name: Setup Composer Cache Directory
        if: ${{ vars.USE_COMPOSER_CACHE  == '1' }}
        id: composer-cache
        run: |
          echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        if: ${{ vars.USE_COMPOSER_CACHE  == '1' }}
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-php-${{ matrix.php }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-${{ matrix.php }}-composer-

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-scripts --ansi

      - name: Run database migrations
        if: ${{ github.ref_name == 'main' }}
        run: ./bin/console doctrine:migrations:migrate -e test -n -vv --allow-no-migration --ansi
        env:
          DATABASE_URL: mysql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.mysql.ports['3306'] }}/ci-db?serverVersion=8.0&charset=utf8mb4

      - name: Run database schema update
        if: ${{ github.ref_name != 'main' }}
        run: ./bin/console doctrine:schema:update -e test --force --ansi
        env:
          DATABASE_URL: mysql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.mysql.ports['3306'] }}/ci-db?serverVersion=8.0&charset=utf8mb4

      - name: Run Core Integration test suite WITHOUT COVERAGE
        if: ${{ !matrix.generate-coverage-report }}
        run: |
          ./vendor/bin/phpunit --configuration phpunit.core.xml --testsuite integration --group=io-network,io-database
        env:
          DATABASE_URL: mysql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.mysql.ports['3306'] }}/ci-db?serverVersion=8.0&charset=utf8mb4

      - name: Run Core Integration test suite WITH COVERAGE
        if: ${{ matrix.generate-coverage-report }}
        run: |
          mkdir -p var/tools/phpunit/core
          ./vendor/bin/phpunit --configuration phpunit.core.xml --testsuite integration --group=io-network,io-database \
          --coverage-clover ${{ vars.REPORT_NAME_FOR_INTEGRATION_TEST_COVERAGE_CLOVER }} \
          --log-junit ${{ vars.REPORT_NAME_FOR_INTEGRATION_TEST_COVERAGE_JUNIT }}
        env:
          DATABASE_URL: mysql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.mysql.ports['3306'] }}/ci-db?serverVersion=8.0&charset=utf8mb4

      - name: Get Coverage artifact name
        if: ${{ matrix.generate-coverage-report }}
        id: coverage-artifact-name
        run: echo "name=${{ vars.ARTIFATC_NAME_FOR_INTEGRATION_TEST_COVERAGE}}-$GITHUB_SHA" >> $GITHUB_OUTPUT

      - name: Save coverage reports
        if: ${{ matrix.generate-coverage-report }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.coverage-artifact-name.outputs.name }}
          path: |
            ${{ vars.REPORT_NAME_FOR_INTEGRATION_TEST_COVERAGE_CLOVER }}
            ${{ vars.REPORT_NAME_FOR_INTEGRATION_TEST_COVERAGE_JUNIT }}


  functional-test:
    name: Functional test ${{ matrix.php }}
    needs: [app-preconditions-checks]
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: no
          MYSQL_DATABASE: ci-db_test
          MYSQL_USER: ci-db-user
          MYSQL_PASSWORD: ci-db-password
        ports:
          - 3306/tcp
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    strategy:
      matrix:
        php:
          - '8.0'
        node:
          - '16.x'
        generate-coverage-report: [true]
#        include:
#          - php: '8.1'
#            generate-coverage-report: false
      fail-fast: true
    steps:
      - name: Checkout on SHA-${{ inputs.triggering-sha }}
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.triggering-sha }}

      - name: Show CI job info (dump context)
        if: ${{ vars.SHOW_WORKFLOW_INFO == '1'}}
        uses: crazy-max/ghaction-dump-context@v2

      - name: Setup cache environment
        id: cache-php-extensions
        if: ${{ vars.USE_PHP_EXTENSION_CACHE  == '1' }}
        uses: shivammathur/cache-extensions@v1
        with:
          php-version: ${{ matrix.php }}
          extensions: ${{ env.PHP_EXTENSIONS }}
          key: ${{ env.PHP_EXTENSIONS_CACHE_KEY }}

      - name: Cache extensions
        if: ${{ vars.USE_PHP_EXTENSION_CACHE  == '1' }}
        uses: actions/cache@v3
        with:
          path: ${{ steps.cache-php-extensions.outputs.dir }}
          key: ${{ steps.cache-php-extensions.outputs.key }}
          restore-keys: ${{ steps.cache-php-extensions.outputs.key }}

      - name: Setup PHP
        uses: shivammathur/setup-php@2.25.4
        with:
          php-version: ${{ matrix.php }}
          extensions: ${{ env.PHP_EXTENSIONS }}
          ini-values: memory_limit=-1
          coverage: xdebug
          tools: symfony

      - name: Setup Composer Cache Directory
        if: ${{ vars.USE_COMPOSER_CACHE  == '1' }}
        id: composer-cache
        run: |
          echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        if: ${{ vars.USE_COMPOSER_CACHE  == '1' }}
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-php-${{ matrix.php }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-${{ matrix.php }}-composer-

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-scripts --ansi

      - name: Run database migrations
        if: ${{ github.ref_name == 'main' }}
        run: ./bin/console doctrine:migrations:migrate -e test -n -vv --allow-no-migration --ansi
        env:
          DATABASE_URL: mysql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.mysql.ports['3306'] }}/ci-db?serverVersion=8.0&charset=utf8mb4

      - name: Run database schema update
        if: ${{ github.ref_name != 'main' }}
        run: ./bin/console doctrine:schema:update -e test --force --ansi
        env:
          DATABASE_URL: mysql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.mysql.ports['3306'] }}/ci-db?serverVersion=8.0&charset=utf8mb4

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "${{ matrix.node }}"

      - name: Get Yarn cache directory
        id: yarn-cache
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - name: Cache Yarn
        uses: actions/cache@v3
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-node-${{ matrix.node }}-yarn-${{ hashFiles('**/package.json **/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node }}-yarn-

      - name: Install JS dependencies
        run: yarn install

      - name: Build assets
        run: |
          bin/console assets:install public -vvv -e test
          yarn build

      - name: Run webserver
        run: symfony server:start --port=8080 --dir=public --daemon --no-tls

      - name: Run Functional test suite WITHOUT COVERAGE
        if: ${{ !matrix.generate-coverage-report }}
        run: |
          ./vendor/bin/phpunit --configuration phpunit.core.xml --testsuite functional --group=io-network,io-database --no-interaction
        env:
          DATABASE_URL: mysql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.mysql.ports['3306'] }}/ci-db?serverVersion=8.0&charset=utf8mb4

      - name: Run Functional test suite WITH COVERAGE
        if: ${{ matrix.generate-coverage-report }}
        # no junit log (ripristinare)
        run: |
          mkdir -p var/tools/phpunit/core
          ./vendor/bin/phpunit --configuration phpunit.core.xml --testsuite functional --group=io-network,io-database --no-interaction \
          --coverage-clover ${{ vars.REPORT_NAME_FOR_FUNCTIONAL_TEST_COVERAGE_CLOVER }}
#        run: |
#          mkdir -p var/tools/phpunit/core
#          ./vendor/bin/phpunit --configuration phpunit.core.xml --testsuite functional --group=io-network,io-database --no-interaction \
#          --coverage-clover ${{ vars.REPORT_NAME_FOR_FUNCTIONAL_TEST_COVERAGE_CLOVER }} \
#          --log-junit ${{ vars.REPORT_NAME_FOR_FUNCTIONAL_TEST_COVERAGE_JUNIT }}
        env:
          DATABASE_URL: mysql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.mysql.ports['3306'] }}/ci-db?serverVersion=8.0&charset=utf8mb4

      - name: Get Coverage artifact name
        if: ${{ matrix.generate-coverage-report }}
        id: coverage-artifact-name
        run: echo "name=${{ vars.ARTIFATC_NAME_FOR_FUNCTIONAL_TEST_COVERAGE}}-$GITHUB_SHA" >> $GITHUB_OUTPUT

      - name: Save coverage reports
        if: ${{ matrix.generate-coverage-report }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.coverage-artifact-name.outputs.name }}
          # no junit log (ripristinare)
          path: |
            ${{ vars.REPORT_NAME_FOR_FUNCTIONAL_TEST_COVERAGE_CLOVER }}
#          path: |
#            ${{ vars.REPORT_NAME_FOR_FUNCTIONAL_TEST_COVERAGE_CLOVER }}
#            ${{ vars.REPORT_NAME_FOR_FUNCTIONAL_TEST_COVERAGE_JUNIT }}











#  integration-test:
#    name: Integration test
#    needs: [app-preconditions-checks]
#    runs-on: ubuntu-20.04
#    timeout-minutes: 5
#    services:
#      pgsql:
#        image: postgres:13-alpine
#        env:
#          POSTGRES_DB: ci-db_test
#          POSTGRES_PASSWORD: ci-db-password
#          POSTGRES_USER: ci-db-user
#        ports:
#          - 5432/tcp
#        options: >-
#          --health-cmd pg_isready
#          --health-interval 10s
#          --health-timeout 5s
#          --health-retries 3
#    strategy:
#      matrix:
#        php:
#          #- '8.1'
#          - '8.0'
#        include:
#          - php: '8.0'
#            coverage: true
#      fail-fast: true
#    steps:
#      - name: Checkout on branch ${{ github.event.client_payload.ref_name }}|SHA-${{ github.event.client_payload.sha }}
#        uses: actions/checkout@v3
#        with:
#          ref: ${{ github.event.client_payload.sha }}
#
#      - name: info triggering workflow - commit message
#        run: git log --oneline
#
#      - name: Setup cache environment
#        id: cache-php-extensions
#        if: ${{ env.GITHUB_CACHE_PHP_EXTENSION  == '1' }}
#        uses: shivammathur/cache-extensions@v1
#        with:
#          php-version: ${{ matrix.php }}
#          extensions: ${{ env.PHP_EXTENSIONS }}
#          key: ${{ env.PHP_EXTENSIONS_CACHE_KEY }}
#
#      - name: Cache extensions
#        if: ${{ env.GITHUB_CACHE_PHP_EXTENSION  == '1' }}
#        uses: actions/cache@v3
#        with:
#          path: ${{ steps.cache-php-extensions.outputs.dir }}
#          key: ${{ steps.cache-php-extensions.outputs.key }}
#          restore-keys: ${{ steps.cache-php-extensions.outputs.key }}
#
#      - name: Setup PHP
#        uses: shivammathur/setup-php@2.25.4
#        with:
#          php-version: ${{ matrix.php }}
#          extensions: ${{ env.PHP_EXTENSIONS }}
#          ini-values: memory_limit=-1
#          coverage: xdebug
#          tools: composer, symfony
#
#      - name: Get Composer Cache Directory
#        id: composer-cache
#        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
#
#      - name: Cache dependencies
#        uses: actions/cache@v3
#        with:
#          path: ${{ steps.composer-cache.outputs.dir }}
#          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
#          restore-keys: ${{ runner.os }}-composer-${{ matrix.php }}
#
#      - name: Install Composer dependencies
#        run: composer install --prefer-dist --no-progress --no-scripts --ansi
#
#      #      - name: Run database migrations
#      #        if: ${{ github.ref_name == 'main' }}
#      #        run: ./bin/console doctrine:migrations:migrate -e test -n -vv --allow-no-migration --ansi
#      #        env:
#      #          DATABASE_URL: postgresql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.pgsql.ports['5432'] }}/ci-db?serverVersion=13&charset=utf8
#
#      - name: Run database schema update
#        #        if: ${{ github.ref_name != 'main' }}
#        run: ./bin/console doctrine:schema:update -e test --force --ansi
#        env:
#          DATABASE_URL: postgresql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.pgsql.ports['5432'] }}/ci-db?serverVersion=13&charset=utf8
#
#      - name: Run webserver
#        run: symfony server:start --port=8080 --dir=public --daemon --no-tls
#
#      - name: Run Integration test suite WITHOUT COVERAGE
#        if: ( !matrix.coverage )
#        run: ./vendor/bin/phpunit --testsuite integration
#        env:
#          SYMFONY_DEPRECATIONS_HELPER: disabled
#          DATABASE_URL: postgresql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.pgsql.ports['5432'] }}/ci-db
#
#      - name: Run Integration test suite WITH COVERAGE
#        if: ( matrix.coverage )
#        run: |
#          mkdir -p var/tools/phpunit/symfony
#          ./vendor/bin/phpunit --testsuite integration --group=io-network,io-database \
#          --coverage-clover ${{ env.INTEGRATION_COVERAGE_CLOVER_FILENAME }} \
#          --log-junit ${{ env.INTEGRATION_COVERAGE_LOGJUNIT_FILENAME }}
#        env:
#          DATABASE_URL: postgresql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.pgsql.ports['5432'] }}/ci-db
#
#      - name: Get Coverage artifact name
#        if: matrix.coverage
#        id: coverage-artifact-name
#        run: echo "name=$INTEGRATION_COVERAGE_ARTIFATC_NAME-$GITHUB_SHA" >> $GITHUB_OUTPUT
#
#      - name: Save coverage reports
#        if: matrix.coverage
#        uses: actions/upload-artifact@v3
#        with:
#          name: ${{ steps.coverage-artifact-name.outputs.name }}
#          path: |
#            ${{ env.INTEGRATION_COVERAGE_CLOVER_FILENAME }}
#            ${{ env.INTEGRATION_COVERAGE_LOGJUNIT_FILENAME }}
#
#
#  functional-test:
#    name: Functional test
#    needs: [app-preconditions-checks]
#    runs-on: ubuntu-20.04
#    timeout-minutes: 5
#    services:
#      pgsql:
#        image: postgres:13-alpine
#        env:
#          POSTGRES_DB: ci-db_test
#          POSTGRES_PASSWORD: ci-db-password
#          POSTGRES_USER: ci-db-user
#        ports:
#          - 5432/tcp
#        options: >-
#          --health-cmd pg_isready
#          --health-interval 10s
#          --health-timeout 5s
#          --health-retries 3
#    strategy:
#      matrix:
#        php:
#          #- '8.1'
#          - '8.0'
#        node:
#          - '16.x'
#      fail-fast: true
#    steps:
#      - name: Checkout on branch ${{ github.event.client_payload.ref_name }}|SHA-${{ github.event.client_payload.sha }}
#        uses: actions/checkout@v3
#        with:
#          ref: ${{ github.event.client_payload.sha }}
#
#      - name: info triggering workflow - commit message
#        run: git log --oneline
#
#      - name: Setup cache environment
#        id: cache-php-extensions
#        if: ${{ env.GITHUB_CACHE_PHP_EXTENSION  == '1' }}
#        uses: shivammathur/cache-extensions@v1
#        with:
#          php-version: ${{ matrix.php }}
#          extensions: ${{ env.PHP_EXTENSIONS }}
#          key: ${{ env.PHP_EXTENSIONS_CACHE_KEY }}
#
#      - name: Cache extensions
#        if: ${{ env.GITHUB_CACHE_PHP_EXTENSION  == '1' }}
#        uses: actions/cache@v3
#        with:
#          path: ${{ steps.cache-php-extensions.outputs.dir }}
#          key: ${{ steps.cache-php-extensions.outputs.key }}
#          restore-keys: ${{ steps.cache-php-extensions.outputs.key }}
#
#      - name: Setup PHP
#        uses: shivammathur/setup-php@2.25.4
#        with:
#          php-version: ${{ matrix.php }}
#          extensions: ${{ env.PHP_EXTENSIONS }}
#          ini-values: memory_limit=-1
#          coverage: none
#          tools: composer, symfony
#
#      - name: Get Composer Cache Directory
#        id: composer-cache
#        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
#
#      - name: Cache dependencies
#        uses: actions/cache@v3
#        with:
#          path: ${{ steps.composer-cache.outputs.dir }}
#          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
#          restore-keys: ${{ runner.os }}-composer-${{ matrix.php }}
#
#      - name: Install Composer dependencies
#        run: composer install --prefer-dist --no-progress --no-scripts --ansi
#
#      #      - name: Run database migrations
#      #        if: ${{ github.ref_name == 'main' }}
#      #        run: ./bin/console doctrine:migrations:migrate -e test -n -vv --allow-no-migration --ansi
#      #        env:
#      #          DATABASE_URL: postgresql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.pgsql.ports['5432'] }}/ci-db?serverVersion=13&charset=utf8
#
#      - name: Run database schema update
#        #        if: ${{ github.ref_name != 'main' }}
#        run: ./bin/console doctrine:schema:update -e test --force --ansi
#        env:
#          DATABASE_URL: postgresql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.pgsql.ports['5432'] }}/ci-db?serverVersion=13&charset=utf8
#
#      - name: Setup Node
#        uses: actions/setup-node@v3
#        with:
#          node-version: "${{ matrix.node }}"
#
#      - name: Get Yarn cache directory
#        id: yarn-cache
#        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT
#
#      - name: Cache Yarn
#        uses: actions/cache@v3
#        with:
#          path: ${{ steps.yarn-cache.outputs.dir }}
#          key: ${{ runner.os }}-node-${{ matrix.node }}-yarn-${{ hashFiles('**/package.json **/yarn.lock') }}
#          restore-keys: |
#            ${{ runner.os }}-node-${{ matrix.node }}-yarn-
#
#      - name: Install JS dependencies
#        run: yarn install
#
#      - name: Build assets
#        run: |
#          bin/console assets:install public -vvv -e test
#          yarn build
#
#      - name: Run webserver
#        run: symfony server:start --port=8080 --dir=public --daemon --no-tls
#
#      - name: Run functional test suite
#        run: ./vendor/bin/phpunit tests/Functional
#        env:
#          SYMFONY_DEPRECATIONS_HELPER: disabled
#          DATABASE_URL: postgresql://ci-db-user:ci-db-password@127.0.0.1:${{ job.services.pgsql.ports['5432'] }}/ci-db
